/// <reference types="node" />
import { IFronteggContext } from '../../components/frontegg-context/types';
import { EntitlementsClientOptions } from './types';
import * as events from 'events';
import { TEntity } from '../identity/types';
import { EntitlementsUserScoped } from './entitlements.user-scoped';
export declare class EntitlementsClient extends events.EventEmitter {
    private readonly httpClient;
    private refreshTimeout;
    private readonly readyPromise;
    private readonly options;
    private cache?;
    private offset;
    private constructor();
    private parseOptions;
    ready(): Promise<EntitlementsClient>;
    forUser<T extends TEntity>(entity: T): EntitlementsUserScoped<T>;
    forFronteggToken(token: string): Promise<EntitlementsUserScoped>;
    private loadVendorEntitlements;
    private refreshSnapshot;
    private haveRecentSnapshot;
    static init(context?: IFronteggContext, options?: Partial<EntitlementsClientOptions>): Promise<EntitlementsClient>;
    destroy(): void;
}
