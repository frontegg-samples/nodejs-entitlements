"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntitlementsClient = void 0;
const frontegg_context_1 = require("../../components/frontegg-context");
const authenticator_1 = require("../../authenticator");
const config_1 = require("../../config");
const http_1 = require("../http");
const logger_1 = require("../../components/logger");
const utils_1 = require("../../utils");
const events = require("events");
const entitlements_client_events_1 = require("./entitlements-client.events");
const in_memory_cache_1 = require("./storage/in-memory/in-memory.cache");
const entitlements_user_scoped_1 = require("./entitlements.user-scoped");
const identity_1 = require("../identity");
const entitlements_javascript_commons_1 = require("@frontegg/entitlements-javascript-commons");
const frontegg_entity_helper_1 = require("./helpers/frontegg-entity.helper");
class EntitlementsClient extends events.EventEmitter {
    constructor(httpClient, options = {}) {
        super();
        this.httpClient = httpClient;
        // snapshot data
        this.offset = -1;
        this.options = this.parseOptions(options);
        this.readyPromise = new Promise((resolve) => {
            this.once(entitlements_client_events_1.EntitlementsClientEvents.INITIALIZED, () => resolve(this));
        });
        this.refreshTimeout = setTimeout(() => this.refreshSnapshot().then(() => {
            this.emit(entitlements_client_events_1.EntitlementsClientEvents.INITIALIZED);
        }), this.options.initializationDelayMs);
    }
    parseOptions(givenOptions) {
        return {
            retry: { numberOfTries: 3, secondsDelayRange: { min: 0.5, max: 5 } },
            initializationDelayMs: 0,
            refreshTimeoutMs: 30000,
            ...givenOptions,
        };
    }
    ready() {
        return this.readyPromise;
    }
    forUser(entity) {
        if (!this.cache) {
            throw new Error('EntitlementsClient is not initialized yet.');
        }
        return new entitlements_user_scoped_1.EntitlementsUserScoped(entity, this.cache);
    }
    async forFronteggToken(token) {
        if (!this.cache) {
            throw new Error('EntitlementsClient is not initialized yet.');
        }
        const tokenData = await identity_1.IdentityClient.getInstance().validateToken(token);
        const customAttributes = (0, frontegg_entity_helper_1.appendUserIdAttribute)((0, entitlements_javascript_commons_1.prepareAttributes)({
            jwt: tokenData,
        }), tokenData);
        return new entitlements_user_scoped_1.EntitlementsUserScoped(tokenData, this.cache, customAttributes);
    }
    async loadVendorEntitlements() {
        const entitlementsData = await this.httpClient.get('/api/v1/vendor-entitlements');
        const vendorEntitlementsDto = entitlementsData.data;
        const newOffset = entitlementsData.data.snapshotOffset;
        const newCache = await in_memory_cache_1.InMemoryEntitlementsCache.initialize(vendorEntitlementsDto, newOffset.toString());
        const oldCache = this.cache;
        this.cache = newCache;
        this.offset = entitlementsData.data.snapshotOffset;
        // clean
        await (oldCache === null || oldCache === void 0 ? void 0 : oldCache.clear());
        await (oldCache === null || oldCache === void 0 ? void 0 : oldCache.shutdown());
        // emit
        this.emit(entitlements_client_events_1.EntitlementsClientEvents.SNAPSHOT_UPDATED, entitlementsData.data.snapshotOffset);
    }
    async refreshSnapshot() {
        await (0, utils_1.retry)(async () => {
            if (!(await this.haveRecentSnapshot())) {
                logger_1.default.debug('[entitlements] Refreshing the outdated snapshot.', { currentOffset: this.offset });
                await this.loadVendorEntitlements();
                logger_1.default.debug('[entitlements] Snapshot refreshed.', { currentOffset: this.offset });
            }
        }, this.options.retry);
        this.refreshTimeout = setTimeout(() => this.refreshSnapshot(), this.options.refreshTimeoutMs);
    }
    async haveRecentSnapshot() {
        const serverOffsetDto = await this.httpClient.get('/api/v1/vendor-entitlements-snapshot-offset');
        const isRecent = serverOffsetDto.data.snapshotOffset === this.offset;
        logger_1.default.debug('[entitlements] Offsets compared.', {
            isRecent,
            serverOffset: serverOffsetDto.data.snapshotOffset,
            localOffset: this.offset,
        });
        return isRecent;
    }
    static async init(context = frontegg_context_1.FronteggContext.getContext(), options = {}) {
        const authenticator = new authenticator_1.FronteggAuthenticator();
        await authenticator.init(context.FRONTEGG_CLIENT_ID, context.FRONTEGG_API_KEY);
        const httpClient = new http_1.HttpClient(authenticator, { baseURL: config_1.config.urls.entitlementsService });
        return new EntitlementsClient(httpClient, options);
    }
    destroy() {
        clearTimeout(this.refreshTimeout);
    }
}
exports.EntitlementsClient = EntitlementsClient;
//# sourceMappingURL=entitlements-client.js.map