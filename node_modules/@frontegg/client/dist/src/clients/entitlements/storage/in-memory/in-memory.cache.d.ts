import type { EntitlementsCache, ExpirationTime } from '../types';
import type { FeatureKey, TenantId, UserId } from '../../types';
import type { Permission } from '../../../identity/types';
import type { VendorEntitlementsV1 } from '../../api-types';
import type { FeatureFlag } from '@frontegg/entitlements-javascript-commons/dist/feature-flags/types';
export declare class InMemoryEntitlementsCache implements EntitlementsCache {
    readonly revision: string;
    private nodeCache;
    private constructor();
    getEntitlementExpirationTime(featKey: FeatureKey, tenantId: TenantId, userId?: UserId): Promise<ExpirationTime | undefined>;
    getLinkedFeatures(permissionKey: Permission): Promise<Set<string>>;
    getFeatureFlags(featureKey: string): Promise<FeatureFlag[]>;
    static initialize(data: VendorEntitlementsV1.GetDTO, revPrefix?: string): InMemoryEntitlementsCache;
    private setupEntitlementsReadModel;
    private setupPermissionsReadModel;
    private setupFeatureFlagsReadModel;
    clear(): Promise<void>;
    shutdown(): Promise<void>;
}
