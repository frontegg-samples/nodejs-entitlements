import { IEntity, tokenTypes, AuthHeaderType, IValidateTokenOptions, IEntityWithRoles, TEntityWithRoles } from '../types';
export declare abstract class TokenResolver<T extends IEntity> {
    protected allowedTokenTypes: tokenTypes[];
    private readonly type;
    constructor(allowedTokenTypes: tokenTypes[], type: AuthHeaderType);
    abstract validateToken(token: string, publicKey: string, options?: IValidateTokenOptions): Promise<T | TEntityWithRoles<T>>;
    protected verifyToken(token: string, publicKey: string): Promise<T>;
    validateTokenType(tokenType: tokenTypes): void;
    validateRolesAndPermissions({ roles: entityRoles, permissions: entityPermissions }: IEntityWithRoles, options: Pick<IValidateTokenOptions, 'permissions' | 'roles'>): Promise<void>;
    protected abstract getEntity(entity: T): Promise<IEntityWithRoles>;
    shouldHandle(type: AuthHeaderType): boolean;
    private verifyAsync;
}
