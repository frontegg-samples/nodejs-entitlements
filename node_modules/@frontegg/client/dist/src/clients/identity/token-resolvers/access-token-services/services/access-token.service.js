"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccessTokenService = void 0;
const axios_1 = require("axios");
const exceptions_1 = require("../../../exceptions");
const apiTokensDisabledError = 'Api tokens are disabled';
class AccessTokenService {
    constructor(httpClient, type) {
        this.httpClient = httpClient;
        this.type = type;
    }
    async getEntity(entity) {
        try {
            return await this.getEntityFromIdentity(entity);
        }
        catch (e) {
            if (e instanceof axios_1.AxiosError) {
                if (this.isApiTokensDisabledError(e)) {
                    throw new exceptions_1.FailedToAuthenticateException();
                }
            }
            throw e;
        }
    }
    async getActiveAccessTokenIds() {
        try {
            return await this.getActiveAccessTokenIdsFromIdentity();
        }
        catch (e) {
            if (e instanceof axios_1.AxiosError) {
                if (this.isApiTokensDisabledError(e)) {
                    throw new exceptions_1.FailedToAuthenticateException();
                }
            }
            throw e;
        }
    }
    shouldHandle(type) {
        return this.type === type;
    }
    isApiTokensDisabledError(e) {
        var _a, _b, _c, _d;
        return ((_a = e === null || e === void 0 ? void 0 : e.response) === null || _a === void 0 ? void 0 : _a.status) === 403 && ((_d = (_c = (_b = e === null || e === void 0 ? void 0 : e.response) === null || _b === void 0 ? void 0 : _b.data) === null || _c === void 0 ? void 0 : _c.errors) === null || _d === void 0 ? void 0 : _d[0]) === apiTokensDisabledError;
    }
}
exports.AccessTokenService = AccessTokenService;
//# sourceMappingURL=access-token.service.js.map