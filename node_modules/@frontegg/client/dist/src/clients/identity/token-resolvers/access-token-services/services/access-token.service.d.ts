import { HttpClient } from '../../../../http';
import { IAccessToken, IEntityWithRoles, tokenTypes } from '../../../types';
import { IAccessTokenService } from '../access-token.service.interface';
export declare abstract class AccessTokenService<T extends IAccessToken> implements IAccessTokenService<T> {
    readonly httpClient: HttpClient;
    readonly type: tokenTypes.UserAccessToken | tokenTypes.TenantAccessToken;
    constructor(httpClient: HttpClient, type: tokenTypes.UserAccessToken | tokenTypes.TenantAccessToken);
    getEntity(entity: T): Promise<IEntityWithRoles>;
    getActiveAccessTokenIds(): Promise<string[]>;
    abstract getEntityFromIdentity(entity: T): Promise<IEntityWithRoles>;
    abstract getActiveAccessTokenIdsFromIdentity(): Promise<string[]>;
    shouldHandle(type: tokenTypes.UserAccessToken | tokenTypes.TenantAccessToken): boolean;
    private isApiTokensDisabledError;
}
