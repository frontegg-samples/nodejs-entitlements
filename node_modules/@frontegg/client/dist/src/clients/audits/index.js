"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuditsClient = void 0;
const axios_1 = require("axios");
const authenticator_1 = require("../../authenticator");
const config_1 = require("../../config");
const logger_1 = require("../../components/logger");
class AuditsClient {
    constructor() {
        this.authenticator = new authenticator_1.FronteggAuthenticator();
    }
    async init(clientId, accessKey) {
        logger_1.default.info('going to authenticate');
        await this.authenticator.init(clientId, accessKey);
        logger_1.default.info('Authenticated with frontegg');
    }
    async sendAudit(audit) {
        try {
            logger_1.default.info('going to send audit');
            await this.authenticator.validateAuthentication();
            await axios_1.default.post(config_1.config.urls.auditsService, audit, {
                headers: {
                    'x-access-token': this.authenticator.accessToken,
                    'frontegg-tenant-id': audit.tenantId,
                },
            });
        }
        catch (e) {
            logger_1.default.error('failed to send audit to audits service - ', e);
            throw e;
        }
        logger_1.default.info('sent audit successfully');
    }
    async getAudits(params) {
        logger_1.default.info('going to get audits');
        const paramsToSend = { ...params, ...params.filters };
        delete paramsToSend.filters;
        await this.authenticator.validateAuthentication();
        const response = await axios_1.default.get(config_1.config.urls.auditsService, {
            params: paramsToSend,
            headers: {
                'x-access-token': this.authenticator.accessToken,
                'frontegg-tenant-id': params.tenantId,
            },
        });
        const { data } = response;
        return data;
    }
    async getAuditsStats(params) {
        logger_1.default.info('going to get audits stats');
        const paramsToSend = { ...params };
        delete paramsToSend.filters;
        await this.authenticator.validateAuthentication();
        const response = await axios_1.default.get(`${config_1.config.urls.auditsService}/stats`, {
            params: paramsToSend,
            headers: {
                'x-access-token': this.authenticator.accessToken,
                'frontegg-tenant-id': params.tenantId,
            },
        });
        const { data } = response;
        return data;
    }
    async getAuditsMetadata() {
        logger_1.default.info('going to get audits metadata');
        const params = { entityName: 'audits' };
        await this.authenticator.validateAuthentication();
        const response = await axios_1.default.get(config_1.config.urls.metadataService, {
            params,
            headers: { 'x-access-token': this.authenticator.accessToken },
        });
        logger_1.default.info('got audits metadata');
        const { data } = response;
        return data;
    }
    async setAuditsMetadata(metadata) {
        // Make sure to override the entity name
        metadata.entityName = 'audits';
        logger_1.default.info('going to update audits metadata');
        await this.authenticator.validateAuthentication();
        const response = await axios_1.default.post(config_1.config.urls.metadataService, metadata, {
            headers: { 'x-access-token': this.authenticator.accessToken },
        });
        logger_1.default.info('done updating audits metadata');
        const { data } = response;
        return data;
    }
}
exports.AuditsClient = AuditsClient;
//# sourceMappingURL=index.js.map