"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HostedLoginClient = void 0;
const authenticator_1 = require("../../authenticator");
const logger_1 = require("../../components/logger");
const frontegg_context_1 = require("../../components/frontegg-context");
const axios_1 = require("axios");
const config_1 = require("../../config");
const jsonwebtoken_1 = require("jsonwebtoken");
class HostedLoginClient {
    /**
     * @param redirectURI - Required, URI that the user will be redirected to once it was authenticated with Frontegg.
     */
    constructor(redirectURI) {
        this._baseURL = null;
        this._authenticator = null;
        this._authorizationHeader = null;
        this.redirectURI = redirectURI.toString();
    }
    /**
     * Generates a URL to redirect the user in order to authenticate with Frontegg.
     * The user should be redirected to this URL
     * @param state - Optional, let you provide a state that will be provided on the response from Frontegg.
     * @returns authorization - the url to redirect the user to in order to authenticate with Frontegg
     */
    async requestAuthorize({ state }) {
        const baseURL = await this.getFronteggBaseURL();
        const { clientId } = this.getFronteggCredentials();
        const url = new URL(baseURL);
        url.pathname = '/oauth/authorize';
        url.searchParams.set('response_type', 'code');
        url.searchParams.set('client_id', clientId);
        url.searchParams.set('scope', 'openid+email+profile');
        url.searchParams.set('redirect_uri', this.redirectURI);
        if (state) {
            url.searchParams.set('state', state);
        }
        logger_1.default.info('Authorize url was generated');
        return url.toString();
    }
    /**
     * This method verify the code provided by the client and exchange it with user information.
     * @param code - Required, on time code to verify the user authentication
     * @param state - Optional, required only if state was provided in the authorization request
     * @returns user - The user profile information.
     * @returns accessToken - User access token to call Frontegg APIs.
     * @returns refreshToken - refresh token to generate new access token.
     */
    async codeExchange({ code, state }) {
        var _a, _b, _c, _d;
        const authenticator = await this.getFronteggAuthenticator();
        logger_1.default.info('Going to exchange token with Frontegg');
        try {
            const response = await axios_1.default.post(`${config_1.config.urls.oauthService}/token`, {
                grant_type: 'authorization_code',
                code,
                redirect_uri: this.redirectURI,
                state,
            }, {
                headers: {
                    'x-access-token': authenticator.accessToken,
                    Authorization: this.getAuthorizationHeader(),
                },
            });
            logger_1.default.info('Token was exchanged with Frontegg, decoding access token');
            const user = this.decodeAccessToken(response.data.access_token);
            return {
                user,
                accessToken: response.data.access_token,
                refreshToken: response.data.refresh_token,
            };
        }
        catch (e) {
            logger_1.default.error('failed to exchange token with Frontegg', e);
            if (e.response) {
                throw new Error(`[${(_a = e.response) === null || _a === void 0 ? void 0 : _a.status}] ${(_d = (_c = (_b = e.response) === null || _b === void 0 ? void 0 : _b.data) === null || _c === void 0 ? void 0 : _c.errors) === null || _d === void 0 ? void 0 : _d.join(', ')}`);
            }
            throw new Error('failed to exchange code');
        }
    }
    decodeAccessToken(accessToken) {
        return (0, jsonwebtoken_1.decode)(accessToken, { json: true });
    }
    getAuthorizationHeader() {
        if (!this._authorizationHeader) {
            const { clientId, apiKey } = this.getFronteggCredentials();
            const buffer = new Buffer(`${clientId}:${apiKey}`);
            this._authorizationHeader = `Basic ${buffer.toString('base64')}`;
        }
        return this._authorizationHeader;
    }
    async getFronteggBaseURL() {
        if (this._baseURL) {
            return this._baseURL;
        }
        return this.fetchBaseURL();
    }
    getFronteggCredentials() {
        const { FRONTEGG_CLIENT_ID, FRONTEGG_API_KEY } = frontegg_context_1.FronteggContext.getContext();
        return {
            clientId: FRONTEGG_CLIENT_ID || process.env.FRONTEGG_CLIENT_ID || '',
            apiKey: FRONTEGG_API_KEY || process.env.FRONTEGG_API_KEY || '',
        };
    }
    async fetchBaseURL() {
        const authenticator = await this.getFronteggAuthenticator();
        logger_1.default.info('going to get vendor configuration');
        const response = await axios_1.default.get(`${config_1.config.urls.vendorsService}/base-url`, {
            headers: {
                'x-access-token': authenticator.accessToken,
            },
        });
        logger_1.default.info('got base url configuration');
        this._baseURL = response.data.baseURL;
        return this._baseURL;
    }
    async getFronteggAuthenticator() {
        if (!this._authenticator) {
            const authenticator = new authenticator_1.FronteggAuthenticator();
            const { apiKey, clientId } = this.getFronteggCredentials();
            logger_1.default.info('going to authenticate with Frontegg');
            await authenticator.init(clientId, apiKey);
            this._authenticator = authenticator;
        }
        return this._authenticator;
    }
}
exports.HostedLoginClient = HostedLoginClient;
//# sourceMappingURL=hosted-login.client.js.map