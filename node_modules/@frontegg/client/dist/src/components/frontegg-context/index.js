"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FronteggContext = void 0;
const package_loader_1 = require("../../utils/package-loader");
class FronteggContext {
    static getInstance() {
        if (!FronteggContext.instance) {
            FronteggContext.instance = new FronteggContext();
        }
        return FronteggContext.instance;
    }
    static init(context, options) {
        FronteggContext.getInstance().context = context;
        FronteggContext.getInstance().validateOptions(options);
        FronteggContext.getInstance().options = options !== null && options !== void 0 ? options : {};
    }
    static getContext() {
        return (FronteggContext.getInstance().context || {
            FRONTEGG_CLIENT_ID: '',
            FRONTEGG_API_KEY: '',
        });
    }
    static getOptions() {
        return FronteggContext.getInstance().options || {};
    }
    constructor() {
        this.context = null;
        this.options = {};
    }
    validateOptions(options) {
        if (options === null || options === void 0 ? void 0 : options.accessTokensOptions) {
            this.validateAccessTokensOptions(options.accessTokensOptions);
        }
    }
    validateAccessTokensOptions(accessTokensOptions) {
        if (!accessTokensOptions.cache) {
            throw new Error(`'cache' is missing from access tokens options`);
        }
        if (accessTokensOptions.cache.type === 'ioredis') {
            this.validateIORedisOptions(accessTokensOptions.cache.options);
        }
        else if (accessTokensOptions.cache.type === 'redis') {
            this.validateRedisOptions(accessTokensOptions.cache.options);
        }
    }
    validateIORedisOptions(redisOptions) {
        package_loader_1.PackageUtils.loadPackage('ioredis');
        const requiredProperties = ['host', 'port'];
        requiredProperties.forEach((requiredProperty) => {
            if (redisOptions[requiredProperty] === undefined) {
                throw new Error(`${requiredProperty} is missing from ioredis cache options`);
            }
        });
    }
    validateRedisOptions(redisOptions) {
        package_loader_1.PackageUtils.loadPackage('redis');
        const requiredProperties = ['url'];
        requiredProperties.forEach((requiredProperty) => {
            if (redisOptions[requiredProperty] === undefined) {
                throw new Error(`${requiredProperty} is missing from redis cache options`);
            }
        });
    }
}
exports.FronteggContext = FronteggContext;
//# sourceMappingURL=index.js.map