"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.withAuthentication = void 0;
const clients_1 = require("../clients");
const logger_1 = require("../components/logger");
const types_1 = require("../clients/identity/types");
function withAuthentication({ roles = [], permissions = [] } = {}) {
    return async (req, res, next) => {
        const authHeader = getAuthHeader(req);
        if (!authHeader) {
            return res.status(401).send('Unauthenticated');
        }
        const { token, type } = authHeader;
        let user;
        try {
            user = await clients_1.IdentityClient.getInstance().validateToken(token, { roles, permissions }, type);
        }
        catch (e) {
            const { statusCode, message } = e;
            logger_1.default.error(message);
            res.status(statusCode).send(`Failed to verify authentication`);
            return next(e);
        }
        // Store the decoded user on the request
        req.frontegg = {
            user: { ...user, id: '' },
        };
        switch (user.type) {
            case types_1.tokenTypes.UserToken:
                // The subject of the token (OpenID token) is saved on the req.frontegg.user as well for easier readability
                req.frontegg.user.id = user.sub;
                break;
            case types_1.tokenTypes.UserApiToken:
                req.frontegg.user.id = user.createdByUserId;
                break;
            case types_1.tokenTypes.UserAccessToken:
                req.frontegg.user.id = user.userId;
        }
        // And move to the next handler
        next();
    };
}
exports.withAuthentication = withAuthentication;
function getAuthHeader(req) {
    let token = req.header('authorization');
    if (token) {
        return { token: token.replace('Bearer ', ''), type: types_1.AuthHeaderType.JWT };
    }
    token = req.header('x-api-key');
    if (token) {
        return { token, type: types_1.AuthHeaderType.AccessToken };
    }
    return null;
}
//# sourceMappingURL=with-authentication.js.map