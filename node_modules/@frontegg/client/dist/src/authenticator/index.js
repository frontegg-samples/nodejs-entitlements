"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FronteggAuthenticator = void 0;
const axios_1 = require("axios");
const config_1 = require("../config");
const logger_1 = require("../components/logger");
const utils_1 = require("../utils");
class FronteggAuthenticator {
    constructor() {
        this.accessToken = '';
        this.accessTokenExpiry = Date.now();
        this.clientId = '';
        this.apiKey = '';
        this.refreshTimeout = null;
        this.shuttingDown = false;
    }
    async init(clientId, apiKey) {
        this.clientId = clientId;
        this.apiKey = apiKey;
        let numberOfTries = 3;
        if (process.env.FRONTEGG_AUTHENTICATOR_NUMBER_OF_TRIES) {
            if (isNaN(+process.env.FRONTEGG_AUTHENTICATOR_NUMBER_OF_TRIES)) {
                logger_1.default.error('got invalid value for FRONTEGG_AUTHENTICATOR_NUMBER_OF_TRIES');
            }
            else {
                numberOfTries = +process.env.FRONTEGG_AUTHENTICATOR_NUMBER_OF_TRIES;
            }
        }
        return (0, utils_1.retry)(() => this.authenticate(), {
            numberOfTries,
            secondsDelayRange: {
                min: 0.5,
                max: 5,
            },
        });
    }
    async refreshAuthentication() {
        await this.authenticate(true);
    }
    async validateAuthentication() {
        if (this.accessToken === '' || this.accessTokenExpiry === 0 || Date.now() >= this.accessTokenExpiry) {
            logger_1.default.info('authentication token needs refresh - going to refresh it');
            await this.refreshAuthentication();
        }
    }
    async shutdown() {
        this.shuttingDown = true;
        if (this.refreshTimeout !== null) {
            clearTimeout(this.refreshTimeout);
        }
    }
    async authenticate(force = false) {
        var _a;
        if (this.accessToken !== '' && !force) {
            return;
        }
        logger_1.default.info('posting authentication request');
        let response;
        try {
            response = await axios_1.default.post(config_1.config.urls.authenticationService, {
                clientId: this.clientId,
                secret: this.apiKey,
            });
        }
        catch (e) {
            logger_1.default.error('Failed to authenticate with Frontegg');
            if (e instanceof axios_1.AxiosError) {
                const axiosError = e;
                logger_1.default.error(`Failed with status - ${(_a = axiosError.response) === null || _a === void 0 ? void 0 : _a.status}`);
            }
            this.accessToken = '';
            this.accessTokenExpiry = 0;
            throw new Error('Failed to authenticate with Frontegg');
        }
        logger_1.default.info('authenticated with frontegg');
        // Get the token and the expiration time
        const { token, expiresIn } = response.data;
        // Save the token
        this.accessToken = token;
        // Next refresh is when we have only 20% of the sliding window remaining
        const nextRefresh = expiresIn * 1000 * 0.8;
        this.accessTokenExpiry = Date.now() + nextRefresh;
        if (!this.shuttingDown) {
            this.refreshTimeout = setTimeout(() => {
                this.refreshAuthentication();
            }, nextRefresh);
        }
    }
}
exports.FronteggAuthenticator = FronteggAuthenticator;
//# sourceMappingURL=index.js.map