"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RedisCacheManager = void 0;
const package_loader_1 = require("../utils/package-loader");
const logger_1 = require("../components/logger");
class RedisCacheManager {
    constructor(options) {
        const { createClient } = package_loader_1.PackageUtils.loadPackage('redis');
        this.redisManager = createClient(options);
        this.redisManager.connect().catch((e) => logger_1.default.error('Failed to connect to redis', e));
    }
    async set(key, data, options) {
        if (options === null || options === void 0 ? void 0 : options.expiresInSeconds) {
            this.redisManager.set(key, JSON.stringify(data), { EX: options.expiresInSeconds });
        }
        else {
            this.redisManager.set(key, JSON.stringify(data));
        }
    }
    async get(key) {
        const stringifiedData = await this.redisManager.get(key);
        return stringifiedData ? JSON.parse(stringifiedData) : null;
    }
    async del(key) {
        if (key.length) {
            await this.redisManager.del(key);
        }
    }
}
exports.RedisCacheManager = RedisCacheManager;
//# sourceMappingURL=redis-cache.manager.js.map